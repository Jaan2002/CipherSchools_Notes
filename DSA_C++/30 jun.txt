///Linked list varation code

#include <iostream>
using namespace std;

class Node{
public :
int data;
Node* next;
Node(int data){
next = NULL;
this->data = data;
}
};

void display(Node* head){
while(head != NULL){
cout << head->data << " -> ";
head = head->next;
}
cout << "NULL\n";
}

Node* addAtTheEnd(Node* head, int x){

if(head == NULL){
return new Node(x);
}

Node* temp = head;
while(temp->next != NULL){
temp = temp->next;
}

temp->next = new Node(x);

return head;
}

Node* deleteFirstNode(Node* head){
if(head == NULL){
return NULL;
}

return head->next;
}

// 1 3 2 5
// 3 2 5


Node* deleteLastNode(Node* head){

if(head == NULL || head->next == NULL){
return NULL;
}

Node* temp = head;
while(temp->next->next != NULL){
temp = temp->next;
}

temp->next = NULL;
return head;
// return head of the updated linklist
}


int main() {

Node* head = NULL;
Node* pre = head;

while(true){
int x;
cin >> x;

if(x == -1){
break;
}

if(head == NULL){
head = new Node(x);
pre = head;
}
else{
pre->next = new Node(x);
pre = pre->next;
}
}

display(head);

Node* newHead = new Node(2);

newHead->next = head;
head = newHead;

display(head);

head = addAtTheEnd(head, 10);

display(head);

head = deleteFirstNode(head);
display(head);
}