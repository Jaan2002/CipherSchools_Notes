#include <iostream>
using namespace std;

class Node{
public :
int data;
Node* next;

Node(int data){
this->data = data;
next = NULL;
}
};

*************************************
#include <iostream>
using namespace std;

class Node{
public :
int data;
Node* next;

Node(int data){
this->data = data;
next = NULL;
}
};



int getMid(Node* head){

if(head == NULL){
return -1;
}
Node *slow = head;
Node *fast = head;

while(fast != NULL && fast->next != NULL){
slow = slow->next;
fast = fast->next->next;
}

return slow->data;
}

Node* reverse(Node* head){
Node* forv = NULL;
Node* curr = head;
Node* pre = NULL;

while(curr != NULL){
forv = curr->next;
curr->next = pre;
pre = curr;
curr = forv;
}

return pre;
}


void display(Node* head)
{
while(head != NULL)
{
cout << head->data << " -> ";
head = head->next;
}
cout << "NULL\n";

}

int main() {

Node* head = NULL;
Node* pre = head;

while(true){
int x;
cin >> x;

if(x == -1)
break;

if(head == NULL){
head = new Node(x);
pre = head;
}
else{
pre->next = new Node(x);
pre = pre->next;
}
}

//cout << getMid(head);
display(head);
head = reverse(head);
display(head);
// 1 4 5 8 9. // ans = 5 n = 5
// 0 1 2 3 4

// 1 4 2 1 3 4 // ans = 2 n = 6
// 0 1 2 3 4 5

// NULL -1
// 1 n = 1 ans = 1
}

int getMid(Node* head){

if(head == NULL){
return -1;
}

int count = 0;
Node* curr = head;
while(curr != NULL){
count++;
curr = curr->next;
}


count = (count + 1) / 2;
curr = head;

while(count > 1){
curr = curr->next;
count--;
}

return curr->data;
}


void display(Node* head)
{
while(head != NULL)
{
cout << head->data << " ";
head = head->next;
}
}

int main() {

Node* head = NULL;
Node* pre = head;

while(true){
int x;
cin >> x;

if(x == -1)
break;

if(head == NULL){
head = new Node(x);
pre = head;
}
else{
pre->next = new Node(x);
pre = pre->next;
}
}

cout << getMid(head);

// 1 4 5 8 9. // ans = 5 n = 5
// 0 1 2 3 4

// 1 4 2 1 3 4 // ans = 2 n = 6
// 0 1 2 3 4 5

// NULL -1
// 1 n = 1 ans = 1
}